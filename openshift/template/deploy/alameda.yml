apiVersion: v1
kind: Template
metadata:
  name: federator.ai
  annotations:
    openshift.io/display-name: "Federator.ai"
    description: "Alameda is a prediction engine that foresees future resource usage of your Kubernetes cluster from the cloud layer down to the pod level. We use machine learning technology to provide intelligence that enables dynamic scaling and scheduling of your containers - effectively making us the “brain” of Kubernetes resource orchestration. By providing full foresight of resource availability, demand, health, impact and SLA, we enable cloud strategies that involve changing provisioned resources in real time."
    iconClass: "icon-openshift"
    openshift.io/provider-display-name: 'ProphetStor, Inc.'
labels:
  template: alameda
  app: alameda
objects:
- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    labels:
      controller-tools.k8s.io: "1.0"
    name: alamedarecommendations.autoscaling.containers.ai
  spec:
    group: autoscaling.containers.ai
    names:
      kind: AlamedaRecommendation
      plural: alamedarecommendations
    scope: Namespaced
    validation:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              containers:
                items:
                  properties:
                    name:
                      type: string
                    resources:
                      type: object
                  required:
                  - name
                  type: object
                type: array
            required:
            - containers
            type: object
          status:
            type: object
    version: v1alpha1
  status:
    acceptedNames:
      kind: ""
      plural: ""
    conditions: []
    storedVersions: []
- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:    
    labels:
      controller-tools.k8s.io: "1.0"
    name: alamedascalers.autoscaling.containers.ai
  spec:
    group: autoscaling.containers.ai
    names:
      kind: AlamedaScaler
      plural: alamedascalers
    scope: Namespaced
    validation:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: >-
              'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: >-
              'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              customResourceVersion:
                type: string
              enableexecution:
                type: boolean
              policy:
                enum:
                - stable
                - compact
                type: string
              scalingTools:
                items:
                  enum:
                  - vpa
                  - hpa
                  type: string
                type: array
              selector:
                description: 'Important: Run "make" to regenerate code after modifying this file'
                type: object
            required:
            - selector
            type: object
          status:
            properties:
              alamedaController:
                properties:
                  deploymentconfigs:
                    type: object
                  deployments:
                    type: object
                type: object
            type: object
    version: v1alpha1
  status:
    acceptedNames:
      kind: ""
      plural: ""
    conditions: []
    storedVersions: []
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "alameda-datahub-${PROJECT_NAME}"
  rules:
  # Permission for query prometheus under namespace openshift-monitoring 
  - apiGroups: 
    - ""
    resources: 
    - namespaces
    verbs: 
    - get
  - apiGroups:
    - autoscaling.containers.ai
    resources:
    - alamedarecommendations
    verbs:
    - get
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "alameda-operator-${PROJECT_NAME}"
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    - pods
    - replicationcontrollers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - replicasets
    - deployments
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - apps.openshift.io
    resources:
    - deploymentconfigs
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - autoscaling.containers.ai
    resources:
    - alamedascalers
    - alamedarecommendations
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - autoscaling.containers.ai
    resources:
    - alamedascalers/finalizers
    verbs:
    - update
  # Permission for query prometheus under namespace openshift-monitoring 
  - apiGroups: 
    - ""
    resources: 
    - namespaces
    verbs: 
    - get
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - get
    - create
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - create
    - watch
    - list
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - validatingwebhookconfigurations
    verbs:
    - watch
    - create
    - update
    - list
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - watch
    - create
    - update
    - list
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "alameda-evictioner-${PROJECT_NAME}"
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - delete
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "admission-controller-${PROJECT_NAME}"
  rules:
    - apiGroups:
        - "admissionregistration.k8s.io"
      resources:
        - mutatingwebhookconfigurations
      verbs:
        - get
        - create
        - update
    - apiGroups:
        - ""
      resources:
        - pods
      verbs:
        - get
        - list
        - patch
    - apiGroups:
        - apps
      resources:
        - replicasets
        - deployments
      verbs:
        - get
        - list
    - apiGroups:
        - ""
      resources:
        - replicationcontrollers
      verbs:
        - get
        - list
    - apiGroups:
        - apps.openshift.io
      resources:
        - deploymentconfigs
      verbs:
        - get
        - list
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "alameda-datahub-${PROJECT_NAME}"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "alameda-datahub-${PROJECT_NAME}"
  subjects:
  - kind: ServiceAccount
    name: alameda-datahub
    namespace: "${PROJECT_NAME}"
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "alameda-operator-${PROJECT_NAME}"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "alameda-operator-${PROJECT_NAME}"
  subjects:
  - kind: ServiceAccount
    name: alameda-operator
    namespace: "${PROJECT_NAME}"
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "alameda-evictioner-${PROJECT_NAME}"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: alameda-evictioner-${PROJECT_NAME}
  subjects:
  - kind: ServiceAccount
    name: alameda-evictioner
    namespace: "${PROJECT_NAME}"
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "admission-controller-${PROJECT_NAME}"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "admission-controller-${PROJECT_NAME}"
  subjects:
    - kind: ServiceAccount
      name: admission-controller
      namespace: "${PROJECT_NAME}"

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    # This name is related to ClusterRoleBinding in alameda-crd-rbac.yaml.
    name: alameda-datahub
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: alameda-datahub-tls
    labels:
      app: alameda-influxdb
    name: alameda-influxdb
  spec:
    ports:
    - port: 8086
      targetPort: 8086
    selector:
      app: alameda-influxdb
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: '${PROJECT_NAME}.influxdb.pvc'
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${INFLUXDB_SIZE}'
    selector:
      matchLabels:
        storage-name: alameda-influxdb
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: '${PROJECT_NAME}.grafana.pvc'
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${GRAFANA_SIZE}'
    selector:
      matchLabels:
        storage-name: alameda-grafana
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: '${PROJECT_NAME}.alameda-ai.pvc'
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${ALAMEDA_AI_SIZE}'
    selector:
      matchLabels:
        storage-name: alameda-ai
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: alameda-influxdb
    annotations:
      description: Defines how to deploy the application influxdb
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
        app: alameda-influxdb
    template:
      metadata:
        labels:
          app: alameda-influxdb
      spec:
        # securityContext:
        #   runAsUser: 1000
        containers:
        - name: influxdb
          image: influxdb:1.7-alpine
          imagePullPolicy: IfNotPresent
          env:
          - name: INFLUXDB_REPORTING_DISABLED
            value: "true"
          - name: INFLUXDB_HTTP_HTTPS_ENABLED
            value: "true"
          - name: INFLUXDB_HTTP_HTTPS_CERTIFICATE
            value: "/etc/tls/private/tls.crt"
          - name: INFLUXDB_HTTP_HTTPS_PRIVATE_KEY
            value: "/etc/tls/private/tls.key"
          - name: INFLUXDB_HTTP_AUTH_ENABLED
            value: "true"
          - name: INFLUXDB_ADMIN_USER
            value: "admin"
          - name: INFLUXDB_ADMIN_PASSWORD
            value: "adminpass"
          - name: INFLUXDB_USER
            value: "user"
          - name: INFLUXDB_USER_PASSWORD
            value: "userpass"
          volumeMounts:
          - mountPath: /etc/tls/private
            name: alameda-datahub-tls
            readOnly: false
          - mountPath: /var/lib/influxdb
            name: influxdb-storage
            subPath: influxdb
        volumes:
        - name: influxdb-storage
          persistentVolumeClaim:
            claimName: '${PROJECT_NAME}.influxdb.pvc'
        - name: alameda-datahub-tls
          secret:
            secretName: alameda-datahub-tls
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: alameda-datahub
    name: alameda-datahub
  spec:
    ports:
    - name: grpc
      port: 50050
    selector:
      app: alameda-datahub
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: alameda-datahub
    annotations:
      description: Defines how to deploy the application alameda-datahub
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
      app: alameda-datahub
    template:
      metadata:
        name: alameda-datahub
        labels:
          app: alameda-datahub
      spec:
        containers:
        - name: alameda-datahub
          image: containersai/alameda-datahub-rhel:${TAG_NUMBER}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 100m
              memory: 150Mi
            requests:
              cpu: 50m
              memory: 100Mi
          env:
          - name: ALAMEDA_DATAHUB_INFLUXDB_ADDRESS
            value: https://alameda-influxdb.${PROJECT_NAME}.svc:8086
          - name: ALAMEDA_DATAHUB_INFLUXDB_USERNAME
            value: admin
          - name: ALAMEDA_DATAHUB_INFLUXDB_PASSWORD
            value: adminpass
          - name: ALAMEDA_DATAHUB_PROMETHEUS_URL
            value: https://prometheus-k8s.openshift-monitoring.svc:9091
        serviceAccount: alameda-datahub
        serviceAccountName: alameda-datahub
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    # This name is related to ClusterRoleBinding in alameda-crd-rbac.yaml. DO NOT EDIT
    name: alameda-operator
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: alameda-operator
    annotations:
      description: Defines how to deploy the application alameda-operator
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
      app: alameda-operator
    template:
      metadata:
        name: alameda-operator
        labels:
          app: alameda-operator
      spec:
        containers:
        - name: alameda-operator
          image: containersai/alameda-operator-rhel:${TAG_NUMBER}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 20m
              memory: 40Mi
            requests:
              cpu: 10m
              memory: 20Mi
          env:
          - name: ALAMEDA_OPERATOR_DATAHUB_ADDRESS
            value: "alameda-datahub.${PROJECT_NAME}.svc:50050"
        serviceAccount: alameda-operator
        serviceAccountName: alameda-operator
- apiVersion: v1
  kind: Secret
  metadata:
    name: "alameda-docker"
    # namespace: ${NAMESPACE}
  data:
    .dockerconfigjson: "${ALAMEDA_DOCKERHUB_CONFIG}"
  type: kubernetes.io/dockerconfigjson
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: alameda-ai
  imagePullSecrets:
    - name: "alameda-docker"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: alameda-ai
    annotations:
      description: Defines how to deploy the application alameda-ai
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
      name: alameda-ai
    template:
      metadata:
        name: alameda-ai
        labels:
          name: alameda-ai
      spec:
        containers:
        - name: alameda-ai-engine
          image: containersai/alameda-ai:${TAG_NUMBER}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 50051
            protocol: TCP
          resources:
            limits:
              cpu: 4000m
              memory: 450Mi
            requests:
              cpu: 2000m
              memory: 250Mi
          env:
          - name: OPERATOR_ADDRESS
            value: "alameda-operator.${PROJECT_NAME}.svc:50050"
          - name: DATAHUB_ADDRESS
            value: "alameda-datahub.${PROJECT_NAME}.svc:50050"
          volumeMounts:
            - mountPath: /var/log
              name: alameda-ai-log-storage
              subPath: alameda-ai
        volumes:
          - name: alameda-ai-log-storage
            persistentVolumeClaim:
              claimName: '${PROJECT_NAME}.alameda-ai.pvc'
        serviceAccount: alameda-ai
        serviceAccountName: alameda-ai
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: alameda-grafana
    name: alameda-grafana
  spec:
    to:
      kind: Service
      name: alameda-grafana
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: alameda-grafana
    name: alameda-grafana
  spec:
    ports:
    - port: 3000
      targetPort: 3000
    selector:
      app: alameda-grafana
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: grafana-datasources
  data:
    prometheus.yaml: |-
      {
          "apiVersion": 1,
          "datasources": [
              {
                  "orgId": 1,
                  "name": "InfluxDB",                  
                  "type": "influxdb",
                  "access": "proxy",
                  "url": "https://alameda-influxdb.${PROJECT_NAME}.svc:8086",
                  "password": "adminpass",
                  "user": "admin",
                  "database": "_internal",
                  "basicAuth": false,
                  "isDefault": true,
                  "jsonData": {
                    "tlsSkipVerify": true
                  },
                  "readOnly": false
              }
          ]
      }      
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: alameda-grafana
    annotations:
      description: Defines how to deploy the application grafana
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
        app: alameda-grafana
    template:
      metadata:
        labels:
          app: alameda-grafana
      spec:
        containers:
        - name: grafana
          image: grafana/grafana:5.4.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
              subPath: grafana
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
        volumes:
          - name: grafana-storage
            persistentVolumeClaim:
              claimName: '${PROJECT_NAME}.grafana.pvc'
          - configMap:
              defaultMode: 420
              name: grafana-datasources
            name: grafana-datasources            
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: alameda-evictioner
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: alameda-evictioner
    annotations:
      description: Defines how to deploy the alameda-evictioner
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
      app: alameda-evictioner
    template:
      metadata:
        name: alameda-evictioner
        labels:
          app: alameda-evictioner
      spec:
        containers:
        - name: alameda-evictioner
          image: containersai/alameda-evictioner-rhel:${TAG_NUMBER}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 60m
              memory: 90Mi
            requests:
              cpu: 45m
              memory: 75Mi
          env:
          - name: ALAMEDA_EVICTIONER_DATAHUB_ADDRESS
            value: "alameda-datahub.${PROJECT_NAME}.svc:50050"
          - name: ALAMEDA_EVICTIONER_EVICTION_ENABLE
            value: "false"
        serviceAccount: alameda-evictioner
        serviceAccountName: alameda-evictioner
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: admission-controller
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: admission-controller-tls
    labels:
      app: admission-controller
    name: admission-controller
  spec:
    ports:
    - port: 443
      targetPort: 8000
    selector:
      app: admission-controller
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: admission-controller
    annotations:
      description: Defines how to deploy the admission-controller
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    replicas: 1
    selector:
      app: admission-controller
    template:
      metadata:
        name: admission-controller
        labels:
          app: admission-controller
      spec:
        containers:
        - name: admission-controller
          image: containersai/alameda-admission-rhel:${TAG_NUMBER}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 60m
              memory: 90Mi
            requests:
              cpu: 45m
              memory: 75Mi
          env:
          - name: ALAMEDA_ADMCTL_DEPLOYED_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ALAMEDA_ADMCTL_DATAHUB_ADDRESS
            value: "alameda-datahub.${PROJECT_NAME}.svc:50050"
          - name: ALAMEDA_ADMCTL_ENABLE
            value: 'false'
          - name: ALAMEDA_ADMCTL_TLS_CERT_FILE
            value: /etc/tls-certs/tls.crt
          - name: ALAMEDA_ADMCTL_TLS_PRIVATE_KEY_FILE
            value: /etc/tls-certs/tls.key
          - name: ALAMEDA_ADMCTL_CA_CERT_FILE
            value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          volumeMounts:
          - mountPath: /etc/tls-certs
            name: tls-certs
            readOnly: false
        volumes:
        - name: tls-certs
          secret:
            secretName: admission-controller-tls
        serviceAccount: admission-controller
        serviceAccountName: admission-controller
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "aggregate-alameda-admin-edit-${PROJECT_NAME}"
    labels:
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
  rules:
  - apiGroups:
    - autoscaling.containers.ai
    resources:
    - alamedascalers
    verbs:
    - get
    - list
    - create
    - update
    - delete
  - apiGroups:
    - autoscaling.containers.ai
    resources:
    - alamedarecommendations
    verbs:
    - get
    - list
    - watch
parameters:
- name: PROJECT_NAME
  displayName: Alameda namespace
  description: The project name to deploy alameda.
  required: true
  value: ""
- name: ALAMEDA_DOCKERHUB_CONFIG
  displayName: DockerHub config json
  required: true
  description: The DockerHub config json encoded with base64.
  value: ""
- name: TAG_NUMBER
  displayName: Alameda image tag
  required: true
  description: Alameda image tag to be used.
  value: ""
- name: INFLUXDB_SIZE
  displayName: InfluxDB database capacity
  required: true
  description: Capacity of InfluxDB database ( > 10GiB)
  value: "10Gi"
- name: ALAMEDA_AI_SIZE
  displayName: Alameda-AI capacity
  required: true
  description: Capacity of Alameda-AI ( > 10GiB)
  value: "10Gi"
- name: GRAFANA_SIZE
  displayName: Grafana database capacity
  required: true
  description: Capacity of Grafana database ( > 2GiB)
  value: "2Gi"
